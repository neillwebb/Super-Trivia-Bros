{"ast":null,"code":"import _classCallCheck from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/src/components/Trivia.js\";\nimport React from \"react\";\nimport Question from \"../components/Question\";\nimport AnswerOption from \"../components/AnswerOption\";\nimport * as $ from \"axios\";\n\nvar Trivia =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Trivia, _React$Component);\n\n  function Trivia() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Trivia);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Trivia)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      category: _this.props.location.hash.substring(1),\n      difficulty: \"\",\n      questionList: [],\n      answerList: [],\n      count: 0,\n      scoreList: _this.props.allScores,\n      difficultySelected: false,\n      gameFinished: false,\n      score: 0\n    };\n\n    _this.diffcultyClick = function (event) {\n      event.preventDefault();\n      var temp = event.target.name;\n      $.get(\"/api/question/\".concat(_this.state.category)).then(function (data) {\n        console.log(data);\n        var tempArray = [];\n        var tempQuestions = [];\n\n        for (var _i = 0; _i < 10; _i++) {\n          tempArray[_i] = data.data[_i].incorrect_answers.concat(data.data[_i].correct_answer);\n          tempQuestions[_i] = _this.state.questionList.concat(data.data[_i].question);\n        }\n\n        _this.setState({\n          difficulty: temp,\n          difficultySelected: true,\n          answerList: tempArray,\n          questionList: tempQuestions\n        });\n      });\n    };\n\n    _this.answerClick = function (event) {\n      event.preventDefault();\n      console.log(\"hello\");\n    };\n\n    _this.nextQuestion = function (event) {\n      event.preventDefault();\n\n      if (_this.state.count < 9) {\n        _this.setState({\n          count: _this.state.count + 1\n        });\n      } else {\n        _this.setState({\n          gameFinished: true\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Trivia, [{\n    key: \"getQuestions\",\n    value: function getQuestions() {\n      return React.createElement(Question, {\n        name: this.state.questionList[this.state.count],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getAnswers\",\n    value: function getAnswers() {\n      function shuffle(arr) {\n        var currentIndex = arr.length,\n            temporaryValue,\n            randomIndex; // While there remain elements to shuffle...\n\n        while (0 !== currentIndex) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1; // And swap it with the current element.\n\n          temporaryValue = arr[currentIndex];\n          arr[currentIndex] = arr[randomIndex];\n          arr[randomIndex] = temporaryValue;\n        }\n\n        return arr;\n      }\n\n      var options = [\"A\", \"B\", \"C\", \"D\"];\n      var currentAnswers = this.state.answerList[this.state.count].map(function (answer) {\n        return {\n          id: i,\n          answer: answer\n        };\n      });\n      var shuffle = shuffle(currentAnswers);\n      var newAnswers = shuffle.map(function (v, i) {\n        var optionText = v.answer.toString ? v.answer.toString() : v.answer;\n        return {\n          option: options[i],\n          text: optionText,\n          id: v.id\n        };\n      });\n      return newAnswers;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var shuffledChoices = this.state.difficultySelected ? this.getAnswers() : [];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.state.difficultySelected === false ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"cat_class\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.props.location.hash.substring(1), \" Trivia\", \" \"), React.createElement(\"button\", {\n        className: \"easy\",\n        name: \"Easy\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"medium\",\n        name: \"Medium\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Medium\"), React.createElement(\"button\", {\n        className: \"hard\",\n        name: \"Hard\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Hard\")) : this.state.gameFinished === false ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.getQuestions(), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, shuffledChoices.map(function (choice) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, choice.option, \": \", choice.text);\n      })), React.createElement(\"button\", {\n        name: \"next\",\n        onClick: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Next\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Your score was: \"));\n    }\n  }]);\n\n  return Trivia;\n}(React.Component);\n\nexport default Trivia;","map":{"version":3,"sources":["/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/src/components/Trivia.js"],"names":["React","Question","AnswerOption","$","Trivia","state","category","props","location","hash","substring","difficulty","questionList","answerList","count","scoreList","allScores","difficultySelected","gameFinished","score","diffcultyClick","event","preventDefault","temp","target","name","get","then","data","console","log","tempArray","tempQuestions","i","incorrect_answers","concat","correct_answer","question","setState","answerClick","nextQuestion","shuffle","arr","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","options","currentAnswers","map","answer","id","newAnswers","v","optionText","toString","option","text","shuffledChoices","getAnswers","getQuestions","choice","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../components/Question\";\nimport AnswerOption from \"../components/AnswerOption\";\nimport * as $ from \"axios\";\n\nclass Trivia extends React.Component {\n  state = {\n    category: this.props.location.hash.substring(1),\n    difficulty: \"\",\n    questionList: [],\n    answerList: [],\n    count: 0,\n    scoreList: this.props.allScores,\n    difficultySelected: false,\n    gameFinished: false,\n    score: 0\n  };\n\n  diffcultyClick = event => {\n    event.preventDefault();\n    let temp = event.target.name;\n    $.get(`/api/question/${this.state.category}`).then(data => {\n      console.log(data);\n      const tempArray = [];\n      const tempQuestions = [];\n      for (let i = 0; i < 10; i++) {\n        tempArray[i] = data.data[i].incorrect_answers.concat(\n          data.data[i].correct_answer\n        );\n        tempQuestions[i] = this.state.questionList.concat(\n          data.data[i].question\n        );\n      }\n      this.setState({\n        difficulty: temp,\n        difficultySelected: true,\n        answerList: tempArray,\n        questionList: tempQuestions\n      });\n    });\n  };\n\n  answerClick = event => {\n    event.preventDefault();\n    console.log(\"hello\");\n  };\n\n  getQuestions() {\n    return <Question name={this.state.questionList[this.state.count]} />;\n  }\n  getAnswers() {\n    function shuffle(arr) {\n      var currentIndex = arr.length,\n        temporaryValue,\n        randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = arr[currentIndex];\n        arr[currentIndex] = arr[randomIndex];\n        arr[randomIndex] = temporaryValue;\n      }\n      return arr;\n    }\n    const options = [\"A\", \"B\", \"C\", \"D\"];\n    const currentAnswers = this.state.answerList[this.state.count].map(\n      answer => ({ id: i, answer: answer })\n    );\n    const shuffle = shuffle(currentAnswers);\n    const newAnswers = shuffle.map((v, i) => {\n      const optionText = v.answer.toString ? v.answer.toString() : v.answer;\n      return { option: options[i], text: optionText, id: v.id };\n    });\n    return newAnswers;\n  }\n\n  nextQuestion = event => {\n    event.preventDefault();\n    if (this.state.count < 9) {\n      this.setState({\n        count: this.state.count + 1\n      });\n    } else {\n      this.setState({\n        gameFinished: true\n      });\n    }\n  };\n\n  render() {\n    const shuffledChoices = this.state.difficultySelected\n      ? this.getAnswers()\n      : [];\n    return (\n      <div>\n        {this.state.difficultySelected === false ? (\n          <div>\n            <h1 className=\"cat_class\">\n              {this.props.location.hash.substring(1)} Trivia{\" \"}\n            </h1>\n            <button className=\"easy\" name=\"Easy\" onClick={this.diffcultyClick}>\n              Easy\n            </button>\n            <button\n              className=\"medium\"\n              name=\"Medium\"\n              onClick={this.diffcultyClick}\n            >\n              Medium\n            </button>\n            <button className=\"hard\" name=\"Hard\" onClick={this.diffcultyClick}>\n              Hard\n            </button>\n          </div>\n        ) : this.state.gameFinished === false ? (\n          <div>\n            {this.getQuestions()}\n            <div>\n              {shuffledChoices.map(choice => {\n                return (\n                  <li>\n                    {choice.option}: {choice.text}\n                  </li>\n                );\n              })}\n            </div>\n            <button name=\"next\" onClick={this.nextQuestion}>\n              Next\n            </button>\n          </div>\n        ) : (\n          <div>Your score was: </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Trivia;\n"]},"metadata":{},"sourceType":"module"}