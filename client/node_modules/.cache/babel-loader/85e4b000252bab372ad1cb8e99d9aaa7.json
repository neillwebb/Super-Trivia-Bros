{"ast":null,"code":"import _classCallCheck from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/src/components/Trivia.js\";\nimport React from \"react\";\nimport Question from \"../components/Question\";\nimport AnswerOption from \"../components/AnswerOption\";\nimport { Link } from \"react-router-dom\";\nimport * as $ from \"axios\";\n\nfunction shuffle(arr) {\n  var currentIndex = arr.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n\n  return arr;\n}\n\nvar Trivia =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Trivia, _React$Component);\n\n  function Trivia() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Trivia);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Trivia)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      username: \"\",\n      category: _this.props.location.hash.substring(1),\n      difficulty: \"\",\n      questionList: [],\n      answerList: [],\n      count: 0,\n      scoreList: _this.props.allScores,\n      difficultySelected: false,\n      gameFinished: false,\n      score: 0\n    };\n\n    _this.diffcultyClick = function (event) {\n      event.preventDefault();\n      var temp = event.target.name;\n      $.get(\"/api/question/\".concat(_this.state.category)).then(function (data) {\n        console.log(data);\n        var tempArray = [];\n        var tempQuestions = [];\n\n        for (var i = 0; i < 10; i++) {\n          tempArray[i] = data.data[i].incorrect_answers.concat(data.data[i].correct_answer);\n          tempQuestions[i] = _this.state.questionList.concat(data.data[i].question);\n        }\n\n        _this.setState({\n          difficulty: temp,\n          difficultySelected: true,\n          answerList: tempArray,\n          questionList: tempQuestions,\n          score: 0\n        });\n      });\n    };\n\n    _this.answerClick = function (event) {\n      event.preventDefault();\n      console.log(event.target.value);\n\n      if (parseInt(event.target.value) === 3) {\n        _this.setState({\n          score: _this.state.score + 10\n        });\n      }\n\n      _this.nextQuestion();\n    };\n\n    return _this;\n  }\n\n  _createClass(Trivia, [{\n    key: \"getQuestions\",\n    value: function getQuestions() {\n      return React.createElement(Question, {\n        name: this.state.questionList[this.state.count],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getAnswers\",\n    value: function getAnswers() {\n      var options = [\"A\", \"B\", \"C\", \"D\"];\n      var currentAnswers = this.state.answerList[this.state.count].map(function (answer, i) {\n        var optionText = answer.toString ? answer.toString() : answer;\n        return {\n          option: options[i],\n          text: optionText,\n          id: i\n        };\n      });\n      return shuffle(currentAnswers);\n    }\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion() {\n      if (this.state.count < 9) {\n        this.setState({\n          count: this.state.count + 1\n        });\n      } else {\n        this.setState({\n          gameFinished: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var shuffledChoices = this.state.difficultySelected ? this.getAnswers() : [];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, this.state.difficultySelected === false ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"cat_class\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.location.hash.substring(1), \" Trivia\", \" \"), React.createElement(\"button\", {\n        className: \"easy\",\n        name: \"Easy\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"medium\",\n        name: \"Medium\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Medium\"), React.createElement(\"button\", {\n        className: \"hard\",\n        name: \"Hard\",\n        onClick: this.diffcultyClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Hard\")) : this.state.gameFinished === false ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.getQuestions(), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, shuffledChoices.map(function (choice) {\n        return React.createElement(AnswerOption, {\n          key: choice.id,\n          id: choice.id,\n          answerHandler: _this2.answerClick,\n          name: choice.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      }))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"gameOver\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"GAME OVER!\"), React.createElement(\"div\", {\n        className: \"endScore\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Your score was:\", this.state.score, \"!\"), React.createElement(Link, {\n        className: \"menu\",\n        to: \"/gamewindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Back to Main Menu\")));\n    }\n  }]);\n\n  return Trivia;\n}(React.Component);\n\nexport default Trivia;","map":{"version":3,"sources":["/Users/madelynmartin/BOOTCAMP/Trivia/Super-Trivia-Bros/client/src/components/Trivia.js"],"names":["React","Question","AnswerOption","Link","$","shuffle","arr","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Trivia","state","username","category","props","location","hash","substring","difficulty","questionList","answerList","count","scoreList","allScores","difficultySelected","gameFinished","score","diffcultyClick","event","preventDefault","temp","target","name","get","then","data","console","log","tempArray","tempQuestions","i","incorrect_answers","concat","correct_answer","question","setState","answerClick","value","parseInt","nextQuestion","options","currentAnswers","map","answer","optionText","toString","option","text","id","shuffledChoices","getAnswers","getQuestions","choice","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../components/Question\";\nimport AnswerOption from \"../components/AnswerOption\";\nimport { Link } from \"react-router-dom\";\nimport * as $ from \"axios\";\n\nfunction shuffle(arr) {\n  var currentIndex = arr.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n  return arr;\n}\n\nclass Trivia extends React.Component {\n  state = {\n    username: \"\",\n    category: this.props.location.hash.substring(1),\n    difficulty: \"\",\n    questionList: [],\n    answerList: [],\n    count: 0,\n    scoreList: this.props.allScores,\n    difficultySelected: false,\n    gameFinished: false,\n    score: 0\n  };\n\n  diffcultyClick = event => {\n    event.preventDefault();\n    let temp = event.target.name;\n    $.get(`/api/question/${this.state.category}`).then(data => {\n      console.log(data);\n      const tempArray = [];\n      const tempQuestions = [];\n      for (let i = 0; i < 10; i++) {\n        tempArray[i] = data.data[i].incorrect_answers.concat(\n          data.data[i].correct_answer\n        );\n        tempQuestions[i] = this.state.questionList.concat(\n          data.data[i].question\n        );\n      }\n      this.setState({\n        difficulty: temp,\n        difficultySelected: true,\n        answerList: tempArray,\n        questionList: tempQuestions,\n        score: 0\n      });\n    });\n  };\n\n  answerClick = event => {\n    event.preventDefault();\n    console.log(event.target.value);\n    if (parseInt(event.target.value) === 3) {\n      this.setState({\n        score: this.state.score + 10\n      });\n    }\n    this.nextQuestion();\n  };\n\n  getQuestions() {\n    return <Question name={this.state.questionList[this.state.count]} />;\n  }\n  getAnswers() {\n    const options = [\"A\", \"B\", \"C\", \"D\"];\n    const currentAnswers = this.state.answerList[this.state.count].map(\n      (answer, i) => {\n        const optionText = answer.toString ? answer.toString() : answer;\n        return { option: options[i], text: optionText, id: i };\n      }\n    );\n    return shuffle(currentAnswers);\n  }\n\n  nextQuestion() {\n    if (this.state.count < 9) {\n      this.setState({\n        count: this.state.count + 1\n      });\n    } else {\n      this.setState({\n        gameFinished: true\n      });\n    }\n  }\n\n  render() {\n    const shuffledChoices = this.state.difficultySelected\n      ? this.getAnswers()\n      : [];\n    return (\n      <div>\n        {this.state.difficultySelected === false ? (\n          <div>\n            <h1 className=\"cat_class\">\n              {this.props.location.hash.substring(1)} Trivia{\" \"}\n            </h1>\n            <button className=\"easy\" name=\"Easy\" onClick={this.diffcultyClick}>\n              Easy\n            </button>\n            <button\n              className=\"medium\"\n              name=\"Medium\"\n              onClick={this.diffcultyClick}\n            >\n              Medium\n            </button>\n            <button className=\"hard\" name=\"Hard\" onClick={this.diffcultyClick}>\n              Hard\n            </button>\n          </div>\n        ) : this.state.gameFinished === false ? (\n          <div>\n            {this.getQuestions()}\n            <div>\n              {shuffledChoices.map(choice => {\n                return (\n                  <AnswerOption\n                    key={choice.id}\n                    id={choice.id}\n                    answerHandler={this.answerClick}\n                    name={choice.text}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div>\n            <p className=\"gameOver\">GAME OVER!</p>\n            <div className=\"endScore\">\n              Your score was:\n              {this.state.score}!\n            </div>\n            <Link className=\"menu\" to=\"/gamewindow\">\n              Back to Main Menu\n            </Link>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Trivia;\n"]},"metadata":{},"sourceType":"module"}